
// ==========================================
// CUDA Gaussian Elimination - Strategy A & B
// ==========================================

#include <stdio.h>
#include <stdlib.h>
#include <cuda_runtime.h>

// CUDA Kernel for Strategy A: each thread processes a full row
__global__ void gaussian_elimination_row_kernel(double* A, double* b, int n, int k) {
    int row = blockIdx.x * blockDim.x + threadIdx.x;
    if (row <= k || row >= n) return;

    double factor = A[row * n + k] / A[k * n + k];
    for (int j = k; j < n; j++) {
        A[row * n + j] -= factor * A[k * n + j];
    }
    b[row] -= factor * b[k];
}

// CUDA Kernel for Strategy B: each block processes one row, threads handle columns
__global__ void gaussian_elimination_rowcol_kernel(double* A, double* b, int n, int k) {
    int row = blockIdx.x + k + 1;
    int col = threadIdx.x;

    if (row >= n || col >= n) return;

    __shared__ double Akk, Aik;
    if (col == 0) {
        Aik = A[row * n + k];
        Akk = A[k * n + k];
    }
    __syncthreads();

    if (col >= k && col < n) {
        A[row * n + col] -= (Aik / Akk) * A[k * n + col];
    }

    if (col == 0) {
        b[row] -= (Aik / Akk) * b[k];
    }
}

// Host-side forward elimination using Strategy A
void forward_elimination_strategy_a(double* A_dev, double* b_dev, int n) {
    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;
    for (int k = 0; k < n; ++k) {
        gaussian_elimination_row_kernel<<<gridSize, blockSize>>>(A_dev, b_dev, n, k);
        cudaDeviceSynchronize();
    }
}

// Host-side forward elimination using Strategy B
void forward_elimination_strategy_b(double* A_dev, double* b_dev, int n) {
    int blockSize = 256;
    for (int k = 0; k < n; ++k) {
        int rows = n - k - 1;
        gaussian_elimination_rowcol_kernel<<<rows, blockSize>>>(A_dev, b_dev, n, k);
        cudaDeviceSynchronize();
    }
}

// Host-side back substitution
void back_substitution(double* A_host, double* b_host, double* x, int n) {
    for (int i = n - 1; i >= 0; i--) {
        for (int j = i + 1; j < n; j++) {
            b_host[i] -= A_host[i * n + j] * x[j];
        }
        x[i] = b_host[i] / A_host[i * n + i];
    }
}

// Example main function
int main() {
    int n = 1024;
    size_t matrixSize = n * n * sizeof(double);
    size_t vectorSize = n * sizeof(double);

    double *A_host = (double*)malloc(matrixSize);
    double *b_host = (double*)malloc(vectorSize);
    double *x = (double*)malloc(vectorSize);

    // Initialize A and b with test data
    for (int i = 0; i < n; ++i) {
        b_host[i] = 1.0;
        for (int j = 0; j < n; ++j) {
            A_host[i * n + j] = (i == j) ? 2.0 : 1.0;
        }
    }

    double *A_dev, *b_dev;
    cudaMalloc(&A_dev, matrixSize);
    cudaMalloc(&b_dev, vectorSize);

    cudaMemcpy(A_dev, A_host, matrixSize, cudaMemcpyHostToDevice);
    cudaMemcpy(b_dev, b_host, vectorSize, cudaMemcpyHostToDevice);

    // Run one of the strategies
    forward_elimination_strategy_b(A_dev, b_dev, n);

    // Copy back and perform back substitution
    cudaMemcpy(A_host, A_dev, matrixSize, cudaMemcpyDeviceToHost);
    cudaMemcpy(b_host, b_dev, vectorSize, cudaMemcpyDeviceToHost);

    back_substitution(A_host, b_host, x, n);

    printf("x[0] = %f\n", x[0]);

    free(A_host); free(b_host); free(x);
    cudaFree(A_dev); cudaFree(b_dev);

    return 0;
}
